(window.webpackJsonp=window.webpackJsonp||[]).push([[24],{352:function(e,t,a){"use strict";a.r(t);var s=a(2),o=Object(s.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"html"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#html"}},[e._v("#")]),e._v(" HTML")]),e._v(" "),a("blockquote",[a("p",[e._v("问题收集自"),a("a",{attrs:{href:"https://juejin.im/post/5cc411ac518825250040a91e",target:"_blank",rel:"noopener noreferrer"}},[e._v("Coderfei"),a("OutboundLink")],1)])]),e._v(" "),a("h2",{attrs:{id:"请描述一下cookie，sessionstorage和localstorage的区别？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#请描述一下cookie，sessionstorage和localstorage的区别？"}},[e._v("#")]),e._v(" 请描述一下cookie，sessionStorage和localStorage的区别？")]),e._v(" "),a("ul",[a("li",[e._v("Cookie的大小是受限的，并且每次你请求一个新的页面的时候Cookie都会被发送过去。通常用于权限验证和标记用户。")]),e._v(" "),a("li",[e._v("sessionStorage用于本地存储一个会话中的数据，这些数据只有在同一个会话中的页面才能访问并且当会话结束后数据也随之销毁。因此sessionStorage不是一种持久化的本地存储，仅仅是会话级别的存储。")]),e._v(" "),a("li",[e._v("localStorage用于持久化的本地存储，除非主动删除数据，否则数据是永远不会过期的。")])]),e._v(" "),a("h1",{attrs:{id:"简述一下src与href的区别。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#简述一下src与href的区别。"}},[e._v("#")]),e._v(" 简述一下src与href的区别。")]),e._v(" "),a("p",[e._v("src用于替换当前元素，href用于在当前文档和引用资源之间确立联系。src是source的缩写，指向外部资源的位置，指向的内容将会嵌入到文档中当前标签所在位置；在请求src资源时会将其指向的资源下载并应用到文档内，例如js脚本，img图片和frame等元素。当浏览器解析到该元素时，会暂停其他资源的下载和处理，直到将该资源加载、编译、执行完毕，图片和框架等元素也如此，类似于将所指向资源嵌入当前标签内。这也是为什么将js脚本放在底部而不是头部。href是Hypertext Reference的缩写，指向网络资源所在位置，建立和当前元素（锚点）或当前文档（链接）之间的链接，如果我们在文档中添加"),a("link",{attrs:{href:"common.css",rel:"stylesheet"}}),e._v("那么浏览器会识别该文档为css文件，就会并行下载资源并且不会停止对当前文档的处理。这也是为什么建议使用link方式来加载css，而不是使用@import方式。")]),e._v(" "),a("h1",{attrs:{id:"一个页面上有大量的图片，加载很慢，你有哪些方法优化这些图片的加载，给用户更好的体验。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一个页面上有大量的图片，加载很慢，你有哪些方法优化这些图片的加载，给用户更好的体验。"}},[e._v("#")]),e._v(" 一个页面上有大量的图片，加载很慢，你有哪些方法优化这些图片的加载，给用户更好的体验。")]),e._v(" "),a("p",[e._v("图片懒加载，在页面上的未可视区域可以添加一个滚动条事件，判断图片位置与浏览器顶端的距离与页面的距离，如果前者小于后者，优先加载。如果为幻灯片、相册等，可以使用图片预加载技术，将当前展示图片的前一张和后一张优先下载。如果图片为css图片，可以使用CSSsprite，SVGsprite，Iconfont、Base64等技术。如果图片过大，可以使用特殊编码的图片，加载时会先加载一张压缩的特别厉害的缩略图，以提高用户体验。如果图片展示区域小于图片的真实大小，则因在服务器端根据业务需要先行进行图片压缩，图片压缩后大小与展示一致。")]),e._v(" "),a("h2",{attrs:{id:"在-html-中如何做-seo-优化？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#在-html-中如何做-seo-优化？"}},[e._v("#")]),e._v(" 在 HTML 中如何做 SEO 优化？")]),e._v(" "),a("ul",[a("li",[e._v("了解搜索引擎如何抓取网页和如何索引网页:你需要知道一些搜索引擎的基本工作原理，各个搜索引擎之间的区别，搜索机器人（SE robot 或叫 web crawler）如何进行工作，搜索引擎如何对搜索结果进行排序等等。")]),e._v(" "),a("li",[e._v("Meta标签优化:主要包括主题（Title)，网站描述(Description)，和关键词（Keywords）。还有一些其它的隐藏文字比如Author（作者），Category（目录），Language（编码语种）等。")]),e._v(" "),a("li",[e._v("如何选取关键词并在网页中放置关键词:搜索就得用关键词。关键词分析和选择是SEO最重要的工作之一。首先要给网站确定主关键词（一般在5个上下），然后针对这些关键词进行优化，包括关键词密度（Density），相关度（Relavancy），突出性（Prominency）等等。")]),e._v(" "),a("li",[e._v("了解主要的搜索引擎:虽然搜索引擎有很多，但是对网站流量起决定作用的就那么几个。比如英文的主要有Google，Yahoo，Bing等；中文的有百度，搜狗，有道等。不同的搜索引擎对页面的抓取和索引、排序的规则都不一样。还要了解各搜索门户和搜索引擎之间的关系，比如AOL网页搜索用的是Google的搜索技术，MSN用的是Bing的技术。")]),e._v(" "),a("li",[e._v("主要的互联网目录:Open Directory自身不是搜索引擎，而是一个大型的网站目录，他和搜索引擎的主要区别是网站内容的收集方式不同。目录是人工编辑的，主要收录网站主页；搜索引擎是自动收集的，除了主页外还抓取大量的内容页面。")]),e._v(" "),a("li",[e._v("按点击付费的搜索引擎:搜索引擎也需要生存，随着互联网商务的越来越成熟，收费的搜索引擎也开始大行其道。最典型的有Overture和百度，当然也包括Google的广告项目Google Adwords。越来越多的人通过搜索引擎的点击广告来定位商业网站，这里面也大有优化和排名的学问，你得学会用最少的广告投入获得最多的点击。")]),e._v(" "),a("li",[e._v("搜索引擎登录:网站做完了以后，别躺在那里等着客人从天而降。要让别人找到你，最简单的办法就是将网站提交（submit）到搜索引擎。如果你的是商业网站，主要的搜索引擎和目录都会要求你付费来获得收录（比如Yahoo要299美元），但是好消息是（至少到目前为止）最大的搜索引擎Google目前还是免费，而且它主宰着60％以上的搜索市场。")]),e._v(" "),a("li",[e._v("链接交换和链接广泛度（Link Popularity）:网页内容都是以超文本（Hypertext）的方式来互相链接的，网站之间也是如此。除了搜索引擎以外，人们也每天通过不同网站之间的链接来Surfing（“冲浪”）。其它网站到你的网站的链接越多，你也就会获得更多的访问量。更重要的是，你的网站的外部链接数越多，会被搜索引擎认为它的重要性越大，从而给你更高的排名。合理的标签使用")])]),e._v(" "),a("h2",{attrs:{id:"写html代码时应注意什么？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#写html代码时应注意什么？"}},[e._v("#")]),e._v(" 写HTML代码时应注意什么？")]),e._v(" "),a("ul",[a("li",[e._v("尽可能少的使用无语义的标签div和span；\n在语义不明显时，既可以使用div或者p时，尽量用p, 因为p在默认情况下有上下间距，对兼容特殊终端有利；不要使用纯样式标签，如：b、font、u等，改用css设置。")]),e._v(" "),a("li",[e._v("需要强调的文本，可以包含在strong或者em标签中（浏览器预设样式，能用CSS指定就不用他们），strong默认样式是加粗（不要用b），em是斜体（不用i）；")]),e._v(" "),a("li",[e._v("每个input标签对应的说明文本都需要使用label标签，并且通过为input设置id属性，在lable标签中设置for来让说明文本和相对应的input关联起来。")])]),e._v(" "),a("h2",{attrs:{id:"如何理解html结构的语义化？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何理解html结构的语义化？"}},[e._v("#")]),e._v(" 如何理解HTML结构的语义化？")]),e._v(" "),a("p",[e._v("所谓标签语义化，就是指标签的含义。语义化的主要目的就是让大家直观的认识标签(markup)和属性(attribute)的用途和作用，对搜索引擎友好，有了良好的结构和语义我们的网页内容便自然容易被搜索引擎抓取，这种符合搜索引擎收索规则的做法，网站的推广便可以省下不少的功夫，而且可维护性更高，因为结构清晰,十分易于阅读。这也是搜索引擎优化SEO重要的一步。")]),e._v(" "),a("h2",{attrs:{id:"html5有哪些新特性？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#html5有哪些新特性？"}},[e._v("#")]),e._v(" html5有哪些新特性？")]),e._v(" "),a("ul",[a("li",[e._v("HTML5 现在已经不是 SGML 的子集，主要是关于图像，位置，存储，多任务等功能的增加。\n"),a("ul",[a("li",[e._v("拖拽释放(Drag and drop)")]),e._v(" "),a("li",[e._v("API 语义化更好的内容标签(header,nav,footer,aside,article,section)")]),e._v(" "),a("li",[e._v("音频、视频API(audio,video)")]),e._v(" "),a("li",[e._v("画布(Canvas)API")]),e._v(" "),a("li",[e._v("地理(Geolocation) API")]),e._v(" "),a("li",[e._v("本地离线存储 localStorage 长期存储数据，浏览器关闭后数据不丢失；\nsessionStorage 的数据在浏览器关闭后自动删除")]),e._v(" "),a("li",[e._v("表单控件，calendar、date、time、email、url、search")]),e._v(" "),a("li",[e._v("新的技术webworker, websocket, Geolocation")])])])]),e._v(" "),a("h2",{attrs:{id:"常见兼容性问题？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#常见兼容性问题？"}},[e._v("#")]),e._v(" 常见兼容性问题？")]),e._v(" "),a("ul",[a("li",[e._v("浏览器默认的margin和padding不同。解决方案是加一个全局的*{margin:0;padding:0;}来统一。")])]),e._v(" "),a("h2",{attrs:{id:"前端优化的方案"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#前端优化的方案"}},[e._v("#")]),e._v(" 前端优化的方案")]),e._v(" "),a("ul",[a("li",[e._v("尽量减少HTTP请求次数")]),e._v(" "),a("li",[e._v("减少DNS查找次数")]),e._v(" "),a("li",[e._v("可缓存的AJAX")]),e._v(" "),a("li",[e._v("推迟加载内容")]),e._v(" "),a("li",[e._v("预加载")]),e._v(" "),a("li",[e._v("减少DOM元素数量")]),e._v(" "),a("li",[e._v("为文件头指定Expires或Cache-Control 13、Gzip压缩文件内容")]),e._v(" "),a("li",[e._v("配置ETag")])]),e._v(" "),a("h2",{attrs:{id:"请描述一下-cookies，sessionstorage-和-localstorage-的区别？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#请描述一下-cookies，sessionstorage-和-localstorage-的区别？"}},[e._v("#")]),e._v(" 请描述一下 cookies，sessionStorage 和 localStorage 的区别？")]),e._v(" "),a("ul",[a("li",[e._v("Web Storage有两种形式：LocalStorage（本地存储）和sessionStorage（会话存储）。这两种方式都允许开发者使用js设置的键值对进行操作，在在重新加载不同的页面的时候读出它们。这一点与cookie类似。\n"),a("ul",[a("li",[e._v("与cookie不同的是：Web Storage数据完全存储在客户端，不需要通过浏览器的请求将数据传给服务器，因此x相比cookie来说能够存储更多的数据，大概5M左右。")]),e._v(" "),a("li",[e._v("LocalStorage和sessionStorage功能上是一样的，但是存储持久时间不一样。\nLocalStorage：浏览器关闭了数据仍然可以保存下来，并可用于所有同源（相同的域名、协议和端口）窗口（或标签页）；\nsessionStorage：数据存储在窗口对象中，窗口关闭后对应的窗口对象消失，存储的数据也会丢失。\n注意：sessionStorage 都可以用localStorage 来代替，但需要记住的是，在窗口或者标签页关闭时，使用sessionStorage 存储的数据会丢失。")]),e._v(" "),a("li",[e._v("使用 local storage和session storage主要通过在js中操作这两个对象来实现，分别为window.localStorage和window.sessionStorage. 这两个对象均是Storage类的两个实例，自然也具有Storage类的属性和方法。")])])])])])}),[],!1,null,null,null);t.default=o.exports}}]);